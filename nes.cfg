SYMBOLS {
    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}
MEMORY {
    ZP:     file = "", start = $0000, size = $0100, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)
    ROM0:   file = %O, start = $8000, size = $7FFA, fill = yes, define = yes;

    # Hardware Vectors at End of 2nd 8K ROM
    ROMV:   file = %O, start = $FFFA, size = $0006, fill = yes;
	
    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0500 3 pages for ppu memory write buffer
    # $0500-$0800 3 pages for cc65 parameter stack
    SRAM:   file = "", start = $0500, size = __STACKSIZE__, define = yes;

    # additional 8K SRAM Bank
    # - data (run)
    # - bss
    # - heap
    RAM:    file = "", start = $6000, size = $2000, define = yes;
	
	DUMMY:		start = $0000, size = $00FF, file = "";
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    HEADER:   load = HEADER,          type = ro;
	VECTORS:  load = ROM0,            type = ro;
	KEYWORDS: load = ROM0,	          type = ro;
	ERROR:	  load = ROM0,			  type = ro;
	CODE:     load = ROM0,            type = ro;
	CHRGET:	  load = ROM0,			  type = ro;
	INIT:	  load = ROM0,			  type = ro;
	EXTRA:	  load = ROM0,			  type = ro;
	RODATA:   load = ROM0,            type = ro;
	ISR:      load = ROMV,            type = ro;
	DUMMY:    load = DUMMY; # don't include
}

